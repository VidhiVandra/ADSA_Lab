import java.util.Scanner;

public class HamiltonianCycle {

    static final int MAX = 20;
    static int[][] graph = new int[MAX][MAX];
    static int[] path;
    static int vertices;
    static boolean isSafe(int v, int[][] graph, int[] path, int pos) {
        // Check if current vertex is adjacent to previous vertex in the path
        if (graph[path[pos - 1]][v] == 0) {
            return false;
        }
    for (int i = 0; i < pos; i++) {
            if (path[i] == v) {
                return false;
            }
        }
        return true;
    }
    static boolean hamiltonianCycleUtil(int[][] graph, int[] path, int pos) {
        if (pos == vertices) {
            return graph[path[pos - 1]][path[0]] == 1;
        }
    for (int v = 1; v < vertices; v++) {
            if (isSafe(v, graph, path, pos)) {
                path[pos] = v;
          if (hamiltonianCycleUtil(graph, path, pos + 1)) {
                    return true;
                }
                path[pos] = -1;
            }
        }
        return false;
    }
        static boolean hamiltonianCycle(int[][] graph) {
        path = new int[vertices];
        for (int i = 0; i < vertices; i++) {
            path[i] = -1;
        }
          path[0] = 0;
      if (!hamiltonianCycleUtil(graph, path, 1)) {
            System.out.println("No Hamiltonian Cycle exists.");
            return false;
        }
          printSolution(path);
        return true;
    }
      static void printSolution(int[] path) {
        System.out.print("Hamiltonian Cycle: ");
        for (int i = 0; i < vertices; i++) {
            System.out.print(path[i] + " ");
        }
        System.out.println(path[0]); // to show the cycle returning to the start
    }
        public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.print("Enter number of vertices: ");
        vertices = sc.nextInt();

        System.out.println("Enter adjacency matrix:");
        for (int i = 0; i < vertices; i++) {
            for (int j = 0; j < vertices; j++) {
                graph[i][j] = sc.nextInt();
            }
        }
       hamiltonianCycle(graph);
       sc.close();
    }
}

