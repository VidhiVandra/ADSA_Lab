#include <stdio.h>
#define MAX 100

int queue[MAX];
int front = -1, rear = -1;
int visited[MAX];

// Enqueue Function
void enqueue(int vertex) {
    if (rear == MAX - 1) {
        printf("Queue Overflow\n");
        return;
    }
    if (front == -1) {
        front = 0;
    }
    rear++;
    queue[rear] = vertex;
}

// Dequeue Function
int dequeue() {
    if (front == -1 || front > rear) {
        return -1;
    }
    int vertex = queue[front];
    front++;
    return vertex;
}

// BFS Function
void BFS(int graph[MAX][MAX], int vertices, int start) {
    int i;

    // Initialize all vertices as unvisited
    for (i = 0; i < vertices; i++) {
        visited[i] = 0;
    }

    // Start BFS
    enqueue(start);
    visited[start] = 1;

    printf("BFS Traversal: ");

    while (front != -1 && front <= rear) {
        int current = dequeue();
        printf("%d ", current);

        for (i = 0; i < vertices; i++) {
            if (graph[current][i] == 1 && visited[i] == 0) {
                enqueue(i);
                visited[i] = 1;
            }
        }
    }

    printf("\n");
}

// Main Function
int main() {
    int graph[MAX][MAX];
    int vertices, i, j, start;

    printf("Enter number of vertices in the graph: ");
    scanf("%d", &vertices);

    printf("Enter adjacency matrix:\n");
    for (i = 0; i < vertices; i++) {
        for (j = 0; j < vertices; j++) {
            scanf("%d", &graph[i][j]);
        }
    }

    printf("Enter starting vertex for BFS (0 to %d): ", vertices - 1);
    scanf("%d", &start);

    BFS(graph, vertices, start);

    return 0;
}
