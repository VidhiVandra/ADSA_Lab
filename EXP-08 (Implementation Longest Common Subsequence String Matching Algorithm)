import java.util.Scanner;

public class LCS {

    static final int MAX = 100;

    // Function to print the LCS
    static void LCS(String str1, String str2) {
        int len1 = str1.length();
        int len2 = str2.length();

        int[][] dp = new int[MAX][MAX]; // DP table

        // Build the DP table
        for (int i = 0; i <= len1; i++) {
            for (int j = 0; j <= len2; j++) {
                if (i == 0 || j == 0) {
                    dp[i][j] = 0;
                } else if (str1.charAt(i - 1) == str2.charAt(j - 1)) {
                    dp[i][j] = dp[i - 1][j - 1] + 1;
                } else {
                    dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);
                }
            }
        }

        int length = dp[len1][len2];
        System.out.println("\nLength of LCS: " + length);

        // Backtracking to find the LCS string
        char[] lcs = new char[length];
        int index = length - 1;

        int i = len1, j = len2;
        while (i > 0 && j > 0) {
            if (str1.charAt(i - 1) == str2.charAt(j - 1)) {
                lcs[index] = str1.charAt(i - 1);
                i--;
                j--;
                index--;
            } else if (dp[i - 1][j] > dp[i][j - 1]) {
                i--;
            } else {
                j--;
            }
        }

        if (length > 0) {
            System.out.println("LCS: " + new String(lcs));
        } else {
            System.out.println("No Common Subsequence Found.");
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.print("Enter first string: ");
        String str1 = sc.next();

        System.out.print("Enter second string: ");
        String str2 = sc.next();

        LCS(str1, str2);

        sc.close();
    }
}
